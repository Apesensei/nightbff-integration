#!/usr/bin/env bash
# .githooks/pre-commit - NightBFF Integration Pre-commit Hook
# Runs lint-staged and submodule drift checks before allowing commits

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üîç Running pre-commit checks...${NC}"

# Function to check if we're in a git repository
check_git_repo() {
    if ! git rev-parse --git-dir > /dev/null 2>&1; then
        echo -e "${RED}‚ùå Not in a git repository${NC}"
        exit 1
    fi
}

# Function to run lint-staged
run_lint_staged() {
    echo -e "${BLUE}üé® Running lint-staged...${NC}"
    
    # Check if lint-staged is available
    if ! command -v lint-staged >/dev/null 2>&1; then
        echo -e "${YELLOW}‚ö†Ô∏è  lint-staged not found, attempting to use npx...${NC}"
        if ! command -v npx >/dev/null 2>&1; then
            echo -e "${RED}‚ùå Neither lint-staged nor npx found${NC}"
            echo -e "${RED}   Please install lint-staged: npm install --save-dev lint-staged${NC}"
            return 1
        fi
        npx lint-staged
    else
        lint-staged
    fi
    
    echo -e "${GREEN}‚úÖ lint-staged completed successfully${NC}"
}

# Function to check submodule drift
check_submodule_drift() {
    echo -e "${BLUE}üîó Checking submodule status...${NC}"
    
    # Get list of submodules
    local submodules
    submodules=$(git submodule status --recursive 2>/dev/null || true)
    
    if [ -z "$submodules" ]; then
        echo -e "${YELLOW}‚ÑπÔ∏è  No submodules found in repository${NC}"
        return 0
    fi
    
    echo -e "${BLUE}   Found submodules:${NC}"
    echo "$submodules" | while read -r line; do
        echo -e "${BLUE}   $line${NC}"
    done
    
    # Check for submodule drift (uncommitted changes in submodules)
    local drift_detected=false
    
    # Check each submodule for uncommitted changes
    git submodule foreach --recursive '
        if [ -n "$(git status --porcelain)" ]; then
            echo "‚ùå Submodule $name has uncommitted changes:"
            git status --porcelain
            exit 1
        fi
    ' || {
        echo -e "${RED}‚ùå Submodule drift detected${NC}"
        echo -e "${RED}   Please commit or stash changes in submodules before committing${NC}"
        drift_detected=true
    }
    
    # Check for submodules not at expected commit
    while IFS= read -r line; do
        if [[ $line =~ ^[-+] ]]; then
            echo -e "${RED}‚ùå Submodule drift detected: $line${NC}"
            echo -e "${RED}   Submodule is not at the expected commit${NC}"
            drift_detected=true
        fi
    done <<< "$submodules"
    
    if [ "$drift_detected" = true ]; then
        echo -e "${RED}‚ùå Submodule drift check failed${NC}"
        echo -e "${YELLOW}üí° To fix submodule drift:${NC}"
        echo -e "${YELLOW}   1. cd into the submodule directory${NC}"
        echo -e "${YELLOW}   2. Commit or stash any changes${NC}"
        echo -e "${YELLOW}   3. Return to the parent repository${NC}"
        echo -e "${YELLOW}   4. Run: git add <submodule-path>${NC}"
        echo -e "${YELLOW}   5. Commit the submodule update${NC}"
        return 1
    fi
    
    echo -e "${GREEN}‚úÖ No submodule drift detected${NC}"
}

# Function to validate commit message format
validate_commit_message() {
    echo -e "${BLUE}üìù Validating commit message format...${NC}"
    
    # Check if commitlint is available
    if ! command -v commitlint >/dev/null 2>&1; then
        echo -e "${YELLOW}‚ö†Ô∏è  commitlint not found, attempting to use npx...${NC}"
        if ! command -v npx >/dev/null 2>&1; then
            echo -e "${YELLOW}‚ö†Ô∏è  Neither commitlint nor npx found${NC}"
            echo -e "${YELLOW}   Skipping commit message validation${NC}"
            echo -e "${YELLOW}   Install commitlint: npm install --save-dev @commitlint/cli @commitlint/config-conventional${NC}"
            return 0
        fi
        
        # Use npx to run commitlint
        if ! npx commitlint --edit "$1" 2>/dev/null; then
            echo -e "${RED}‚ùå Commit message validation failed${NC}"
            echo -e "${RED}   Please use conventional commit format${NC}"
            echo -e "${YELLOW}üí° Examples:${NC}"
            echo -e "${YELLOW}   feat(auth): add user registration${NC}"
            echo -e "${YELLOW}   fix(ci): resolve docker timeout${NC}"
            echo -e "${YELLOW}   docs: update README${NC}"
            return 1
        fi
    else
        # Use local commitlint
        if ! commitlint --edit "$1"; then
            echo -e "${RED}‚ùå Commit message validation failed${NC}"
            return 1
        fi
    fi
    
    echo -e "${GREEN}‚úÖ Commit message format is valid${NC}"
}

# Function to validate hook installation
validate_hook_installation() {
    local hook_path=".git/hooks/pre-commit"
    local githooks_path=".githooks/pre-commit"
    
    if [ ! -f "$hook_path" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Git hook not installed at $hook_path${NC}"
        echo -e "${YELLOW}   Run 'npm run setup:hooks' to install hooks${NC}"
        return 1
    fi
    
    if [ ! -L "$hook_path" ] && [ ! "$(readlink "$hook_path" 2>/dev/null)" = "../../$githooks_path" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Git hook exists but may not point to $githooks_path${NC}"
    fi
}

# Function to verify local Node version alignment
verify_node_version() {
    echo -e "${BLUE}üîß Verifying Node version alignment...${NC}"
    
    # Check if Node is available
    if ! command -v node >/dev/null 2>&1; then
        echo -e "${YELLOW}‚ö†Ô∏è  Node.js not found locally${NC}"
        echo -e "${YELLOW}   Install Node.js: https://nodejs.org/${NC}"
        return 0  # Non-blocking
    fi
    
    local current_version=$(node --version | sed 's/v//' | cut -d. -f1)
    local expected_version="20"
    
    # Check .nvmrc exists
    if [ -f ".nvmrc" ]; then
        local nvmrc_version=$(cat .nvmrc | tr -d '\n' | tr -d '\r')
        echo -e "${BLUE}   .nvmrc specifies: Node $nvmrc_version${NC}"
        
        if [ "$nvmrc_version" != "$expected_version" ]; then
            echo -e "${RED}‚ùå .nvmrc version ($nvmrc_version) doesn't match expected ($expected_version)${NC}"
            return 1
        fi
    fi
    
    # Check .tool-versions exists
    if [ -f ".tool-versions" ]; then
        local tool_version=$(grep "nodejs" .tool-versions | awk '{print $2}' | cut -d. -f1)
        echo -e "${BLUE}   .tool-versions specifies: Node $tool_version${NC}"
        
        if [ "$tool_version" != "$expected_version" ]; then
            echo -e "${RED}‚ùå .tool-versions version ($tool_version) doesn't match expected ($expected_version)${NC}"
            return 1
        fi
    fi
    
    echo -e "${BLUE}   Current local version: Node $current_version${NC}"
    
    if [ "$current_version" -eq "$expected_version" ] 2>/dev/null || [ "$current_version" -gt "$expected_version" ] 2>/dev/null; then
        echo -e "${GREEN}‚úÖ Local Node version is compatible${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Local Node version ($current_version) is older than expected ($expected_version)${NC}"
        echo -e "${YELLOW}üí° To update Node version:${NC}"
        
        if command -v nvm >/dev/null 2>&1; then
            echo -e "${YELLOW}   Using nvm: nvm use${NC}"
        elif command -v asdf >/dev/null 2>&1; then
            echo -e "${YELLOW}   Using asdf: asdf install nodejs && asdf local nodejs 20.18.0${NC}"
        else
            echo -e "${YELLOW}   Install nvm: https://github.com/nvm-sh/nvm${NC}"
            echo -e "${YELLOW}   Or install asdf: https://asdf-vm.com/${NC}"
        fi
        
        # Non-blocking warning, but informative
        return 0
    fi
}

# Main execution
main() {
    local exit_code=0
    
    echo -e "${BLUE}üöÄ NightBFF Integration Pre-commit Hook${NC}"
    echo -e "${BLUE}=======================================${NC}"
    
    # Basic validation
    check_git_repo || exit_code=1
    
    # Verify Node version alignment (informational)
    verify_node_version || true
    
    # Note: Commit message validation is handled by commit-msg hook, not pre-commit
    # Pre-commit hooks run before the commit message is written
    
    # Run lint-staged
    if [ $exit_code -eq 0 ]; then
        run_lint_staged || exit_code=1
    fi
    
    # Check submodule drift
    if [ $exit_code -eq 0 ]; then
        check_submodule_drift || exit_code=1
    fi
    
    # Validate hook installation (informational)
    validate_hook_installation || true
    
    echo ""
    if [ $exit_code -eq 0 ]; then
        echo -e "${GREEN}üéâ All pre-commit checks passed!${NC}"
        echo -e "${GREEN}‚úÖ Commit can proceed${NC}"
    else
        echo -e "${RED}‚ùå Pre-commit checks failed${NC}"
        echo -e "${RED}üö´ Commit blocked - please fix issues above${NC}"
    fi
    
    return $exit_code
}

# Run main function if executed directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi 