# version: '3.8'  # Removed - obsolete in Docker Compose v2

# 
# NightBFF Integration Testing Stack
# See README.md for usage instructions.
#
# This stack uses pre-built images from GHCR for CI/staging/prod.
# For local development, use docker-compose.override.yml to build from source.
#
# Environment variables (set in CI or use defaults):
# - BACKEND_IMAGE: ghcr.io/apesensei/nightbff-backend (default)
# - FRONTEND_IMAGE: ghcr.io/apesensei/nightbff-frontend (default)
# - BACKEND_TAG: int-<commit> (CI sets this)
# - FRONTEND_TAG: int-<commit> (CI sets this)
#

services:
  db:
    image: postgis/postgis:15-3.3
    container_name: nightbff_db_integration
    ports:
      - "5435:5432"
    volumes:
      - postgres_data_integration:/var/lib/postgresql/data
    env_file:
      - backend/config/env/integration.env
    networks:
      - nightbff_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d nightbff_integration_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: nightbff_redis_integration
    ports:
      - "6379"
    networks:
      - nightbff_net

  migrator:
    image: ${BACKEND_IMAGE:-ghcr.io/apesensei/nightbff-backend}:${BACKEND_TAG:-latest}
    container_name: nightbff_migrator_integration
    depends_on:
      db:
        condition: service_healthy
    networks:
      - nightbff_net
    command:
      - /bin/sh
      - -c
      - |
        set -e
        echo "✅ Migrator standing by. Waiting for DB..."
        
        # Use pg_isready (installed in Docker image) for the most reliable DB check
        until pg_isready -h db -p 5432 -U admin; do
          echo "Postgres is unavailable - sleeping"
          sleep 2
        done
        
        echo "✅ DB is ready. Applying migrations..."
        npm run migration:run:compiled && node dist/scripts/run-seeder.js
        
        echo "✅ Migrations and seeding complete. Migrator finished."
    restart: 'no'
    env_file:
      - backend/config/env/integration.env

  backend:
    image: ${BACKEND_IMAGE:-ghcr.io/apesensei/nightbff-backend}:${BACKEND_TAG:-latest}
    container_name: nightbff_backend_integration
    depends_on:
      migrator:
        condition: service_completed_successfully
    ports:
      - "3000:3000"
    env_file:
      - backend/config/env/integration.env
    networks:
      - nightbff_net
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/performance/metrics"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  frontend:
    image: ${FRONTEND_IMAGE:-ghcr.io/apesensei/nightbff-frontend}:${FRONTEND_TAG:-latest}
    container_name: nightbff_frontend_integration
    ports:
      - "8081:80"  # nginx serves on port 80
    networks:
      - nightbff_net
    environment:
      - EXPO_PUBLIC_API_URL=http://backend:3000
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data_integration:
    driver: local

networks:
  nightbff_net:
    driver: bridge
 